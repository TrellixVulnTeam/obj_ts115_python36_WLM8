
from tflite_support.metadata_writers import object_detector
from tflite_support.metadata_writers import writer_utils

ObjectDetectorWriter = object_detector.MetadataWriter
# _MODEL_PATH = "yolo_without_metadata.tflite"
_MODEL_PATH = "/media/db/hdd2/obj_project/tensorflow115/20210722_luoyang_ld/tt/175303.tflite"
# Task Library expects label files that are in the same format as the one below.
_LABEL_FILE = "/media/db/hdd2/obj_project/tensorflow115/20210722_luoyang_ld/pascal_label_map.pbtxt"
# _SAVE_TO_PATH = "yolo_with_metadata.tflite"
_SAVE_TO_PATH = "/media/db/hdd2/obj_project/tensorflow115/20210722_luoyang_ld/175303_32.tflite"
# Normalization parameters is required when reprocessing the image. It is
# optional if the image pixel values are in range of [0, 255] and the input
# tensor is quantized to uint8. See the introduction for normalization and
# quantization parameters below for more details.
# https://www.tensorflow.org/lite/convert/metadata#normalization_and_quantization_parameters)
_INPUT_NORM_MEAN = 127.5
_INPUT_NORM_STD = 127.5
# Create the metadata writer.
writer = ObjectDetectorWriter.create_for_inference(
    writer_utils.load_file(_MODEL_PATH), [_INPUT_NORM_MEAN], [_INPUT_NORM_STD],
    [_LABEL_FILE])
# Verify the metadata generated by metadata writer.
print(writer.get_metadata_json())
# Populate the metadata into the model.
writer_utils.save_file(writer.populate(), _SAVE_TO_PATH)
